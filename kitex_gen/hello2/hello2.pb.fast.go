// Code generated by Fastpb v0.0.2. DO NOT EDIT.

package hello2

import (
	fmt "fmt"
	fastpb "github.com/cloudwego/fastpb"
)

var (
	_ = fmt.Errorf
	_ = fastpb.Skip
)

func (x *Request) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_Request[number], err)
}

func (x *Request) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Name, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Request) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *Request) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.UpdateTime, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Request) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	var v ReqBody
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.ReqBody = append(x.ReqBody, &v)
	return offset, nil
}

func (x *ReqBody) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ReqBody[number], err)
}

func (x *ReqBody) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Number, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *ReqBody) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *Response) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_Response[number], err)
}

func (x *Response) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Code, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Response) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Msg, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Request) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	return offset
}

func (x *Request) fastWriteField1(buf []byte) (offset int) {
	if x.Name == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.Name)
	return offset
}

func (x *Request) fastWriteField2(buf []byte) (offset int) {
	if x.Id == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 2, x.Id)
	return offset
}

func (x *Request) fastWriteField3(buf []byte) (offset int) {
	if x.UpdateTime == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.UpdateTime)
	return offset
}

func (x *Request) fastWriteField4(buf []byte) (offset int) {
	if x.ReqBody == nil {
		return offset
	}
	for i := range x.ReqBody {
		offset += fastpb.WriteMessage(buf[offset:], 4, x.ReqBody[i])
	}
	return offset
}

func (x *ReqBody) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *ReqBody) fastWriteField1(buf []byte) (offset int) {
	if x.Number == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.Number)
	return offset
}

func (x *ReqBody) fastWriteField2(buf []byte) (offset int) {
	if x.Id == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 2, x.Id)
	return offset
}

func (x *Response) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *Response) fastWriteField1(buf []byte) (offset int) {
	if x.Code == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.Code)
	return offset
}

func (x *Response) fastWriteField2(buf []byte) (offset int) {
	if x.Msg == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.Msg)
	return offset
}

func (x *Request) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	return n
}

func (x *Request) sizeField1() (n int) {
	if x.Name == "" {
		return n
	}
	n += fastpb.SizeString(1, x.Name)
	return n
}

func (x *Request) sizeField2() (n int) {
	if x.Id == 0 {
		return n
	}
	n += fastpb.SizeInt32(2, x.Id)
	return n
}

func (x *Request) sizeField3() (n int) {
	if x.UpdateTime == "" {
		return n
	}
	n += fastpb.SizeString(3, x.UpdateTime)
	return n
}

func (x *Request) sizeField4() (n int) {
	if x.ReqBody == nil {
		return n
	}
	for i := range x.ReqBody {
		n += fastpb.SizeMessage(4, x.ReqBody[i])
	}
	return n
}

func (x *ReqBody) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *ReqBody) sizeField1() (n int) {
	if x.Number == "" {
		return n
	}
	n += fastpb.SizeString(1, x.Number)
	return n
}

func (x *ReqBody) sizeField2() (n int) {
	if x.Id == 0 {
		return n
	}
	n += fastpb.SizeInt32(2, x.Id)
	return n
}

func (x *Response) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *Response) sizeField1() (n int) {
	if x.Code == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.Code)
	return n
}

func (x *Response) sizeField2() (n int) {
	if x.Msg == "" {
		return n
	}
	n += fastpb.SizeString(2, x.Msg)
	return n
}

var fieldIDToName_Request = map[int32]string{
	1: "Name",
	2: "Id",
	3: "UpdateTime",
	4: "ReqBody",
}

var fieldIDToName_ReqBody = map[int32]string{
	1: "Number",
	2: "Id",
}

var fieldIDToName_Response = map[int32]string{
	1: "Code",
	2: "Msg",
}
